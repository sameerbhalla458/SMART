#include <Servo.h>
#include <PID_v2.h>
#include <BasicLinearAlgebra.h>
using namespace BLA;

// Create Servo object to control the ESCs
Servo ESC1; Servo ESC2; Servo ESC3; Servo ESC4;

// ESC and Hall pins in Arduino
int ESCpin1 = 6; int ESCpin2 = 7; int ESCpin3 = 8; int ESCpin4 = 9;
int hallpin1 = 18; int hallpin2 = 19; int hallpin3 = 20; int hallpin4 = 21;
int var = 0, var1 = 0, var2 = 0, z = 0 , quo; // Loop number

// PID control of flywheel
volatile byte counts1, counts2, counts3, counts4;
float RPM1, RPM2, RPM3, RPM4, timenew, timepassed, timeold = 0, thresh = 0.2, RPM_tar = 3000; // Seconds
float min_ms = 1175, max_ms = 1900;// Safety Parameters - Flywheel Speed (1500 to 4500 RPM)
// [0.0020, 0.015, 0.00035] // Motor Gains [0.0060, 0.030, 0.00140] Old Motor Gains
double Kp_m = 0.0075, Ki_m = 0.033, Kd_m = 0.00450;
float Ux, Uy, Uz, Wx, Wy, Wz;

// Initializing PID for Flywheels
PID_v2 PID1(Kp_m, Ki_m, Kd_m, PID::Direct);
PID_v2 PID2(Kp_m, Ki_m, Kd_m, PID::Direct);
PID_v2 PID3(Kp_m, Ki_m, Kd_m, PID::Direct);
PID_v2 PID4(Kp_m, Ki_m, Kd_m, PID::Direct);

// Function declarations for VectorNav
void read_imu_data(void);
void check_sync_byte(void);
unsigned short calculate_imu_crc(byte data[], unsigned int length);
union {
  float f;
  byte b[4];
} yaw;// Attitude data
union {
  float f;
  byte b[4];
} pitch;
union {
  float f;
  byte b[4];
} roll;
union {
  float f;
  byte b[4];
} W_x;// Angular rates
union {
  float f;
  byte b[4];
} W_y;
union {
  float f;
  byte b[4];
} W_z;
union {
  float f;
  byte b[4];
} q1;// Quaternions
union {
  float f;
  byte b[4];
} q2;
union {
  float f;
  byte b[4];
} q3;
union {
  float f;
  byte b[4];
} q4;
union {
  unsigned short s;
  byte b[2];
} checksum;// Checksum
bool imu_sync_detected = false;  // check if the sync byte (0xFA) is detected
byte in[100];  // array to save data send from the IMU

// Floats
float rollc = 0, pitchc = 0, yawc = 0, q1c, q2c, q3c, q4c, W1c, W2c, W3c, rem;
float al = 00.00 * 2 * PI / 360; //angular offset of the body frame  //radians
float bt = 35.26 * 2 * PI / 360; //Skew angle    // radians
float I = 2.8023 / 10000; //moment of inertia // kg-m^2
double loop_start = 0, loop_end = 0, dt = 0.1, dtsum = 0,loop_start1 = 0, loop_end1 = 0, dt1;
float roll_saf = 20, pitch_saf = 20;; //degrees
String input;
double A_11, A_12, A_13, A_14, A_21, A_22, A_23, A_24, A_31, A_32, A_33, A_34;
float DR = 4.42;//Damping Ratio
float Wn = 6.45;//Natural Frequency

// Structs
struct IMU {
  float I1, I2, I3, I4, I5, I6, I7, I8, I9, I10;
};
struct FLY {
  float W1, W2, W3, W4;
};
struct COM {
  float C1, C2, C3, C4, C5, C6, C7, C8, C9, C10;
};
struct ERR {
  float E1, E2, E3, E4, E5, E6, E7, E8, E9, E10;
};
struct PD  {
  float P1, P2, P3;
};
struct CL  {
  float S1, S2, S3, S4;
};
struct RPM {
  float R1, R2, R3, R4;
};
struct EKF {
  float K1, K2, K3;
};
struct Xd  {
  float X1, X2, X3;
};
struct Pd  {
  float Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9;
};

// Defining Matrices
Matrix<3, 1> EA_act = {0, 0, 0};
Matrix<4, 1> q_act = {0, 0, 0, 0};
Matrix<3, 1> W_act = {0, 0, 0};
Matrix<4, 1> RPM_act = {0, 0, 0, 0};
Matrix<3, 1> EAc = {0, 0, 0};
Matrix<4, 1> qc = {0, 0, 0, 1};
Matrix<4, 4> q_des_mat = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
Matrix<3, 1> Wc = {0, 0, 0};
Matrix<3, 1> EA_err = {0, 0, 0};
Matrix<4, 1> q_err4 = {0, 0, 0, 0};
Matrix<3, 1> q_err = {0, 0, 0};
Matrix<3, 1> W_err = {0, 0, 0};
Matrix<3, 1> Add_err = {0, 0, 0};

//Matrix<3, 3> J_RLS = {0.0362,0.00,0.00,  0.00,0.0395,0.00,  0.00,0.00,0.0710};//Kgm^2 -- Slides
Matrix<3, 3> J_RLS = {0.0402,0.00,0.00,  0.00,0.0431,0.00,  0.00,0.00,0.0780};//Kgm^2 -- CAD

float Ixx = J_RLS(0, 0); float Iyy = J_RLS(1, 1); float Izz = J_RLS(2, 2); //  used in the EKF and Inertia Estimation
Matrix<3, 3> K_p = {2 * pow(Wn, 2)*Ixx, 0.00, 0.00,  0.00, 2 * pow(Wn, 2)*Iyy, 0.00,  0.00, 0.00, 2 * pow(Wn, 2)*Izz};
Matrix<3, 3> K_d = {2 * Wn*DR * Ixx    , 0.00, 0.00,  0.00, 2 * Wn*DR * Iyy    , 0.00,  0.00, 0.00, 2 * Wn*DR * Izz    };
Matrix<3, 1> U = {0, 0, 0};
Matrix<3, 4> A = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
Matrix<3, 3> A_inv = {0, 0, 0, 0, 0, 0, 0, 0, 0};
Matrix<4, 3> A_term = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
Matrix<4, 1> W_dot = {0, 0, 0, 0};
Matrix<4, 1> W = {0, 0, 0, 0};
Matrix<4, 1> RPM_Com = {0, 0, 0, 0};
Matrix<4, 1> RPM_TAR = {RPM_tar, RPM_tar, RPM_tar, RPM_tar}; // Set 4 flywheel rpm target
Matrix<4, 1> RPM_Prev_Com = {0, 0, 0, 0};
Matrix<3, 1> X_vec = {0, 0, 0};
Matrix<3, 1> X_dot = {0, 0, 0};
Matrix<3, 3> P_vec = {10, 0, 0,  0, 10, 0,  0, 0, 10};
Matrix<3, 3> P_dot = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 3> F = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 3> K = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 3> K_inv = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 1> Meas = {0, 0, 0};
Matrix<3, 3> H = {1, 0, 0, 0, 1, 0, 0, 0, 1};
Matrix<3, 3> Q = {0.0000010000, 0, 0,  0, 0.0000010000, 0,  0, 0, 0.0000100000};
Matrix<3, 3> R = {0.0000022295, 0, 0,  0, 0.0000026592, 0,  0, 0, 0.0000232122};
Matrix<3, 1> x = {0, 0, 0};
Matrix<3, 3> y = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 1> k1 = {0, 0, 0};
Matrix<3, 1> k2 = {0, 0, 0};
Matrix<3, 1> k3 = {0, 0, 0};
Matrix<3, 1> k4 = {0, 0, 0};
Matrix<3, 3> k5 = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 3> k6 = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 3> k7 = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 3> k8 = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 1> EA_ekf = {0, 0, 0};
Matrix<3, 1> W_ekf = {0, 0, 0};
Matrix<3, 1> W_ekf_prev = {0, 0, 0};
Matrix<3, 1> W_acc = {0, 0, 0}; //From the EKF
Matrix<4, 1> RPM_prev = {0, 0, 0, 0};
Matrix<4, 1> RPM_del = {0, 0, 0, 0};
Matrix<4, 1> RPM_dot_act = {0, 0, 0, 0};
Matrix<3, 1> U_act = {0, 0, 0};
Matrix<3, 3> H_I =  { 0, 0, 0,  0, 0, 0,  0, 0, 0 }; //Regression Matrix
Matrix<3, 1> I_vec = { J_RLS(0,0) , J_RLS(1,1) , J_RLS(2,2) };
Matrix<3, 3> P_I = {10, 0, 0,  0, 10, 0,  0, 0, 10};
Matrix<3, 3> W_I = {1, 0, 0,  0, 1, 0,  0, 0, 1};
Matrix<3, 3> I_I = {1, 0, 0,  0, 1, 0,  0, 0, 1};
Matrix<3, 3> K_I = {0, 0, 0,  0, 0, 0,  0, 0, 0};
Matrix<3, 3> K_I_inv = {0, 0, 0,  0, 0, 0,  0, 0, 0};

Matrix<3, 3> H1,H2,H3,H4,H5,H6,H7,H8,H9,H10,H11,H12,H13,H14,H15,H16,H17,H18,H19,H20;
Matrix<3, 1> U1,U2,U3,U4,U5,U6,U7,U8,U9,U10,U11,U12,U13,U14,U15,U16,U17,U18,U19,U20;
Matrix<20*3, 3> H_I_his;
Matrix<20*3, 1> U_act_his;

void setup() {

  Serial.begin(115200);// Serial for communication to PC via Bluetooth
  Serial3.begin(115200);// Serial3 for Vectornav communication

  pinMode(hallpin1, INPUT_PULLUP); // Hall sensor configuration
  pinMode(hallpin2, INPUT_PULLUP);
  pinMode(hallpin3, INPUT_PULLUP);
  pinMode(hallpin4, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(hallpin1), Hall_Detect1, CHANGE); // Interrupt Pin configurations
  attachInterrupt(digitalPinToInterrupt(hallpin2), Hall_Detect2, CHANGE);
  attachInterrupt(digitalPinToInterrupt(hallpin3), Hall_Detect3, CHANGE);
  attachInterrupt(digitalPinToInterrupt(hallpin4), Hall_Detect4, CHANGE);

  PID1.Start(0, 0, RPM_TAR(0)); // input current output setpoint
  PID2.Start(0, 0, RPM_TAR(1));
  PID3.Start(0, 0, RPM_TAR(2));
  PID4.Start(0, 0, RPM_TAR(3));

  ESC1.attach(ESCpin1, 1000, 2000); // Assigning min and max limits
  ESC2.attach(ESCpin2, 1000, 2000);
  ESC3.attach(ESCpin3, 1000, 2000);
  ESC4.attach(ESCpin4, 1000, 2000);

  //  Serial.println("Initializing ESC");
  ESC1.writeMicroseconds(1000);//Initialize the ESC
  ESC2.writeMicroseconds(1000);
  ESC3.writeMicroseconds(1000);
  ESC4.writeMicroseconds(1000);

  delay(1000);//Pause for 1 sec

  ESC1.writeMicroseconds(1290);//Starting Torque
  ESC2.writeMicroseconds(1290);
  ESC3.writeMicroseconds(1290);
  ESC4.writeMicroseconds(1290);

  Serial.println("Roll,Pitch,Yaw");

}

void loop() {

  //Serial.Print
  Serial.print(dtsum, 5); Serial.print(",");
  Serial.print(I_vec(0), 5); Serial.print(",");
  Serial.print(I_vec(1), 5); Serial.print(",");
  Serial.print(I_vec(2), 5); Serial.print(",");
  Serial.print(W_ekf(0), 5); Serial.print(",");
  Serial.print(W_ekf(1), 5); Serial.print(",");
  Serial.print(W_ekf(2), 5); Serial.print(",");
  Serial.print(W_acc(0), 5); Serial.print(",");
  Serial.print(W_acc(1), 5); Serial.print(",");
  Serial.print(W_acc(2), 5); Serial.print(",");
  Serial.print(U_act(0), 5); Serial.print(",");
  Serial.print(U_act(1), 5); Serial.print(",");
  Serial.print(U_act(2), 5); Serial.print(",");
  Serial.print(RPM_act(0), 5); Serial.print(",");
  Serial.print(RPM_act(1), 5); Serial.print(",");
  Serial.print(RPM_act(2), 5); Serial.print(",");
  Serial.print(RPM_act(3), 5); Serial.print(",");
  Serial.print(EA_act(0), 5); Serial.print(",");
  Serial.print(EA_act(1), 5); Serial.print(",");
  Serial.println(EA_act(2), 5);
  

  // Motor RPM Feedback
  FLY FLY_out = FLY_Feedback();
  RPM_act = {FLY_out.W1, FLY_out.W2, FLY_out.W3, FLY_out.W4};
  //  Serial << "RPM_act: " << RPM_act ;Serial.print("  ");

  // VectorNav IMU Feedback
  IMU IMU_out = IMU_Feedback();
  EA_act = {IMU_out.I1, IMU_out.I2, IMU_out.I3};//Euler Angles in degrees
  q_act = {IMU_out.I4, IMU_out.I5, IMU_out.I6, IMU_out.I7};//Quaternions
  W_act = {IMU_out.I8, IMU_out.I9, IMU_out.I10}; //Angular Rates in rad/sec
  //  Serial << "EA_act: " << EA_act ;Serial.print("  ");
  //  Serial << "q_act: " << q_act << '\n';
  //  Serial << "W_act: " << W_act << '\n';

  if (q_act(3) < 0) {
    Serial.print("q4 is negative");
  }
  //  Serial.print(EA_act(0));Serial.print(",");
  //  Serial.print(EA_act(1));Serial.print(",");
  //  Serial.println(EA_act(2));

  // EKF on IMU measurements
  EKF EKF_out = CDEKF();
  W_ekf_prev = W_ekf;
  W_ekf = {EKF_out.K1, EKF_out.K2, EKF_out.K3}; //Angular Rates in rad/sec
  //  Serial.print(W_act(0));Serial.print(","); Serial.print(W_ekf(0));Serial.print(",");//Rad/sec - Roll
  //  Serial.print(W_act(1));Serial.print(","); Serial.print(W_ekf(1));Serial.print(",");//Rad/sec - Pitch
  //  Serial.print(W_act(2));Serial.print(","); Serial.println(W_ekf(2));//Rad/sec - Yaw

  //W_acc from W_ekf (Angular Accelration)
  W_acc = (W_ekf - W_ekf_prev) / dt; //rad/sec^2// to be used in Regression Matrix
  //  Serial << "W_acc: " << W_acc << '\n';

  // Error in Attitudes and Angular Rates
  ERR ERR_out = Errors();
  EA_err = {ERR_out.E1, ERR_out.E2, ERR_out.E3}; //Error in Euler Angles
  q_err = {ERR_out.E4, ERR_out.E5, ERR_out.E6}; //Error in Quaternions
  W_err = {ERR_out.E7, ERR_out.E8, ERR_out.E9}; //Error in Angular Rates in rad/sec
  //  Serial << "EA_err: " << EA_err << '\n';
  //  Serial << "q_err: " << q_err << '\n';
  //  Serial << "W_err: " << W_err << '\n';

  // PD Controller
  PD PD_out = Controller();
  U = {PD_out.P1, PD_out.P2, PD_out.P3}; //Torque in 3-axis in Nm
  //  Serial << "U: " << U << '\n';

  // Control Law
  CL CL_out = Control_Law();
  W_dot = {CL_out.S1, CL_out.S2, CL_out.S3, CL_out.S4}; //Angular Accelration in 3-axis in rad/s^2
  //  Serial << "W_dot: " << W_dot << '\n';

  // Angular Rate from Angular Accelration
  loop_end = millis();
  RPM RPM_out = Angular_Rate();
  loop_start = millis();
  RPM_Prev_Com = RPM_Com;//Saving Previous Command
  RPM_Com = {RPM_out.R1, RPM_out.R2, RPM_out.R3, RPM_out.R4}; // Angular Rate in 3-axis in rad/s
  //  Serial << "RPM_Com: " << RPM_Com << '\n';

  // Estimating Inertia
  //Storing the Regression matrix H
  H20 = H19; H19 = H18; H18 = H17; H17 = H16; H16 = H15;
  H15 = H14; H14 = H13; H13 = H12; H12 = H11; H11 = H10;
  H10 = H9 ; H9 = H8  ; H8 = H7  ; H7 = H6  ; H6 = H5  ;
  H5 = H4  ; H4 = H3  ; H3 = H2  ; H2 = H_I  ;
  H_I = { +W_acc(0)          , -W_ekf(1)*W_ekf(2) , +W_ekf(1)*W_ekf(2) ,
          +W_ekf(0)*W_ekf(2) , +W_acc(1)          , -W_ekf(0)*W_ekf(2) ,
          -W_ekf(0)*W_ekf(1) , +W_ekf(0)*W_ekf(1) , +W_acc(2)};
  H_I_his = H_I && H2 && H3 && H4 && H5 && H6 && H7 && H8 && H9 && H10 && H11 && H12 && H13 && H14 && H15 && H16 && H17 && H18 && H19 && H20;

  //Storing Input history
  //U1,U2,---- U20 in CDEKF
  U_act_his = U_act && U2 && U3 && U4 && U5 && U6 && U7 && U8 && U9 && U10 && U11 && U12 && U13 && U14 && U15 && U16 && U17 && U18 && U19 && U20;
  Matrix<20*3, 20*3> K_I_inv_his = H_I_his * P_I * ~H_I_his;
//  Matrix<6, 6> K_I_inv_his = {0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0,0,0, 0,0,0,0,0,0};
  bool is_nonsingular = Invert(K_I_inv_his);
//  Matrix<3, 20*3> K_I_his = P_I * ~H_I_his * K_I_inv_his;
//  Matrix<3, 3> P_I = ( I_I - K_I_his * H_I_his ) * P_I;
//  I_vec = I_vec + K_I_his * ( U_act_his - H_I_his * I_vec );

  // Assigning Angular Rate to the Flywheels
  ESC_Command();
//  delay(60);//Setting Loop time
  z++;
  dtsum = dtsum + dt;

}// void loop ends here--------------------------------------------------------------------------------------

// Motor RPM Feedback
FLY FLY_Feedback() {
  thresh = dt; //Previous loop time
  struct FLY FLY_return;
  timenew = millis();
  timepassed = (timenew - timeold) / 1000; //seconds
  if (timepassed >= thresh) {
    RPM1 = ((counts1 / 6.0) / timepassed) * 60.0; //RPM
    RPM2 = ((counts2 / 6.0) / timepassed) * 60.0; //RPM
    RPM3 = ((counts3 / 6.0) / timepassed) * 60.0; //RPM
    RPM4 = ((counts4 / 6.0) / timepassed) * 60.0; //RPM
    counts1 = 0;
    counts2 = 0;
    counts3 = 0;
    counts4 = 0;
    timeold = millis();
  }
  FLY_return.W1 = RPM1; FLY_return.W2 = RPM2; FLY_return.W3 = RPM3; FLY_return.W4 = RPM4;
  return FLY_return;
}

void Hall_Detect1() { //Called whenever a magnet/interrupt is detected by the arduino
  counts1++;//1 revolution = 6 counts
}
void Hall_Detect2() {
  counts2++;
}
void Hall_Detect3() {
  counts3++;
}
void Hall_Detect4() {
  counts4++;
}

// VectorNav Functions
void check_sync_byte(void) {
  for (int i = 0; i < 6; i++) {
    Serial3.readBytes(in, 1);
    if (in[0] == 0xFA) {
      imu_sync_detected = true;
      break;
    }
  }
}

unsigned short calculate_imu_crc(byte data[], unsigned int length) {
  unsigned int i;
  unsigned short crc = 0;
  for (i = 0; i < length; i++) {
    crc = (byte)(crc >> 8) | (crc << 8);
    crc ^= data[i];
    crc ^= (byte)(crc & 0xff) >> 4;
    crc ^= crc << 12;
    crc ^= (crc & 0x00ff) << 5;
  }
  return crc;
}

// VectorNav IMU Feedback
IMU IMU_Feedback() {
  struct IMU IMU_return;
  while (true) {
    imu_sync_detected = false;
    if (Serial3.available() > 4) check_sync_byte();
    if (imu_sync_detected) {
      Serial3.readBytes(in, 45);
      checksum.b[0] = in[44];
      checksum.b[1] = in[43];
      if (calculate_imu_crc(in, 43) == checksum.s) {
        for (int i = 0; i < 4; i++) {
          yaw.b[i] = in[3 + i];
          pitch.b[i] = in[7 + i];
          roll.b[i] = in[11 + i];
          q1.b[i] = in[15 + i];
          q2.b[i] = in[19 + i];
          q3.b[i] = in[23 + i];
          q4.b[i] = in[27 + i];
          W_x.b[i] = in[31 + i];
          W_y.b[i] = in[35 + i];
          W_z.b[i] = in[39 + i];
        }
        break;
      }
    }
  }

  IMU_return.I1 = roll.f; IMU_return.I2 = pitch.f; IMU_return.I3 = yaw.f;
  IMU_return.I4 = q1.f; IMU_return.I5 = q2.f; IMU_return.I6 = q3.f; IMU_return.I7 = q4.f;
  IMU_return.I8 = W_x.f; IMU_return.I9 = W_y.f; IMU_return.I10 = W_z.f;
  return IMU_return;
}

// Error in Attitudes and Angular Rates
ERR Errors() {
  struct ERR ERR_return;
  EA_err = EA_act - EAc; // Error in Euler Angles
  q_des_mat = { +qc(3), +qc(2), -qc(1), -qc(0),
                -qc(2), +qc(3), +qc(0), -qc(1),
                +qc(1), -qc(0), +qc(3), -qc(2),
                +qc(0), +qc(1), +qc(2), +qc(3)
              };
  q_err4 = q_des_mat * q_act;
  W_err = W_act - Wc; //Error in Angular Rates
  Add_err = Add_err + EA_err; // Addition of Euler Angles
  //  Serial << "Add_err: " << Add_err << '\n';
  ERR_return.E1 = EA_err(0); ERR_return.E2 = EA_err(1); ERR_return.E3 = EA_err(2);
  ERR_return.E4 = q_err4(0); ERR_return.E5 = q_err4(1); ERR_return.E6 = q_err4(2);
  ERR_return.E7 = W_err(0); ERR_return.E8 = W_err(1); ERR_return.E9 = W_err(2);
  return ERR_return;
}

// PD Controller
PD Controller() {
  struct PD PD_return;
  U = - K_p * q_err - K_d * W_err ;

  float q_freq = 0.05;

  //Control Trajectory: Sin
  //  U(0) = var1*0.04*sin(z*q_freq);
  //  U(1) = var1*0.04*sin(z*q_freq);
  //  U(2) = var1*0.04*sin(z*q_freq);

  //Attitude Trajectory: Sin
  EAc(0) = var1 * 8 * sin(q_freq * z);
  EAc(1) = var1 * 8 * cos(q_freq * z);
  EAc(2) = var1 * 8 * sin(q_freq * z);
  //  EAc(0) = var1*10*sin(q_freq * z); // Modified by DC
  //  EAc(1) = var1*10*cos(q_freq * z);
  //  EAc(2) = var1*10*sin((q_freq * z) + PI);

  qc = {sin(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) - cos(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)),
        cos(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) + sin(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)),
        cos(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)) - sin(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)),
        cos(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) + sin(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180))
       };
  PD_return.P1 = U(0); PD_return.P2 = U(1); PD_return.P3 = U(2);
  return PD_return;
}

// Control Law
CL Control_Law() {
  struct CL CL_return;
  //A matrix
  A_11 = + cos (bt) * sin (al);
  A_12 = + cos (bt) * cos (al);
  A_13 = - cos (bt) * sin (al);
  A_14 = - cos (bt) * cos (al);
  A_21 = + cos (bt) * cos (al);
  A_22 = - cos (bt) * sin (al);
  A_23 = - cos (bt) * cos (al);
  A_24 = + cos (bt) * sin (al);
  A_31 = - sin (bt);
  A_32 = - sin (bt);
  A_33 = - sin (bt);
  A_34 = - sin (bt);

  A = {A_11, A_12, A_13, A_14, A_21, A_22, A_23, A_24, A_31, A_32, A_33, A_34};
  A_inv = A * ~A;
  bool is_nonsingular = Invert(A_inv);
  A_term = ~A * A_inv;
  W_dot = - A_term * U / I;//rad/sec^2
  CL_return.S1 = W_dot(0); CL_return.S2 = W_dot(1); CL_return.S3 = W_dot(2); CL_return.S4 = W_dot(3);
  //  Serial << "Aterm: " << A_term << '\n';
  return CL_return;
}

// Angular Rate from Angular Accelration
RPM Angular_Rate() {
  struct RPM RPM_return;
  dt = (loop_end - loop_start) / 1000;
  W = RPM_act + W_dot * (30 / PI) * dt; //RPM
  RPM_return.R1 = W(0); RPM_return.R2 = W(1); RPM_return.R3 = W(2); RPM_return.R4 = W(3);
  return RPM_return;
}

// Assigning Angular Rate to the Flywheels
void ESC_Command() {

  // Reach Nominal RPM
  if (var == 0) {
    RPM_Com = RPM_TAR;
    //    Serial.print("No Control");
    //    Serial.print("  ");
  }

  // Change Gains
  if (Serial.available()) {
    input = Serial.readStringUntil('\n');
    var = input.toInt();
    rem = var % 1000; //rem = Gain * 100
    quo = abs((var - rem) / 1000); //quo = Kp or Kd number (0,4,8)
    if (quo == 1) {
      K_p(0, 0) = rem / 100;
    }
    else if (quo == 2) {
      K_p(1, 1) = rem / 100;
    }
    else if (quo == 3) {
      K_p(2, 2) = rem / 100;
    }
    else if (quo == 4) {
      K_d(0, 0) = rem / 100;
    }
    else if (quo == 5) {
      K_d(1, 1) = rem / 100;
    }
    else if (quo == 6) {
      K_d(2, 2) = rem / 100;
    }
    else if (quo == 7) {
      EAc(0) = rem;
      qc = {sin(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) - cos(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)),
            cos(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) + sin(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)),
            cos(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)) - sin(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)),
            cos(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) + sin(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180))
           };
      Add_err = {0, 0, 0};
    }
    else if (quo == 8) {
      EAc(1) = rem;
      qc = {sin(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) - cos(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)),
            cos(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) + sin(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)),
            cos(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180)) - sin(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)),
            cos(EAc(0)*PI / (2 * 180))*cos(EAc(1)*PI / (2 * 180))*cos(EAc(2)*PI / (2 * 180)) + sin(EAc(0)*PI / (2 * 180))*sin(EAc(1)*PI / (2 * 180))*sin(EAc(2)*PI / (2 * 180))
           };
      Add_err = {0, 0, 0};
    }
    else if (quo == 9) {
      //      EAc(2) = rem;
      //      qc = {sin(EAc(0)*PI/(2*180))*cos(EAc(1)*PI/(2*180))*cos(EAc(2)*PI/(2*180)) - cos(EAc(0)*PI/(2*180))*sin(EAc(1)*PI/(2*180))*sin(EAc(2)*PI/(2*180)),
      //            cos(EAc(0)*PI/(2*180))*sin(EAc(1)*PI/(2*180))*cos(EAc(2)*PI/(2*180)) + sin(EAc(0)*PI/(2*180))*cos(EAc(1)*PI/(2*180))*sin(EAc(2)*PI/(2*180)),
      //            cos(EAc(0)*PI/(2*180))*cos(EAc(1)*PI/(2*180))*sin(EAc(2)*PI/(2*180)) - sin(EAc(0)*PI/(2*180))*sin(EAc(1)*PI/(2*180))*cos(EAc(2)*PI/(2*180)),
      //            cos(EAc(0)*PI/(2*180))*cos(EAc(1)*PI/(2*180))*cos(EAc(2)*PI/(2*180)) + sin(EAc(0)*PI/(2*180))*sin(EAc(1)*PI/(2*180))*sin(EAc(2)*PI/(2*180))};
      //      Add_err = {0,0,0};

      //OR
      
      I_vec = { 0.9*J_RLS(0,0) , 0.9*J_RLS(1,1) , 0.9*J_RLS(2,2) };
      P_I = {10, 0, 0,  0, 10, 0,  0, 0, 10};
      var1 = 1;
      var2 = 1;
      z = 0;
      dtsum = 0;
    }
    else if (quo == 0) {
      var = 0;
      var1 = 0;
      EAc = {0, 0, 0};
      qc = {0, 0, 0, 1};
      Add_err = {0, 0, 0};
    }
  }

  // Safety Angle Check
  if (EA_act(0) >= roll_saf || EA_act(0) <= -roll_saf || EA_act(1) >= pitch_saf || EA_act(1) <= -pitch_saf) {
    RPM_Com = RPM_Prev_Com;
    //    Serial.print("Max Angle");
    //    Serial.print("  ");
  }

  PID1.Start(0, 0, RPM_Com(0)); // Change RPM target based on the RPM Commands
  PID2.Start(0, 0, RPM_Com(1));
  PID3.Start(0, 0, RPM_Com(2));
  PID4.Start(0, 0, RPM_Com(3));

  const double ESC_Command1 = PID1.Run(RPM_act(0));
  const double ESC_Command_ms1 = map(ESC_Command1, 0, 180, 1000, 2000);
  const double ESC_Command_ms1_constrain = constrain(ESC_Command_ms1, min_ms, max_ms);

  const double ESC_Command2 = PID2.Run(RPM_act(1));
  const double ESC_Command_ms2 = map(ESC_Command2, 0, 180, 1000, 2000);
  const double ESC_Command_ms2_constrain = constrain(ESC_Command_ms2, min_ms, max_ms);

  const double ESC_Command3 = PID3.Run(RPM_act(2));
  const double ESC_Command_ms3 = map(ESC_Command3, 0, 180, 1000, 2000);
  const double ESC_Command_ms3_constrain = constrain(ESC_Command_ms3, min_ms, max_ms);

  const double ESC_Command4 = PID4.Run(RPM_act(3));
  const double ESC_Command_ms4 = map(ESC_Command4, 0, 180, 1000, 2000);
  const double ESC_Command_ms4_constrain = constrain(ESC_Command_ms4, min_ms, max_ms);

  ESC1.writeMicroseconds(ESC_Command_ms1_constrain);
  ESC2.writeMicroseconds(ESC_Command_ms2_constrain);
  ESC3.writeMicroseconds(ESC_Command_ms3_constrain);
  ESC4.writeMicroseconds(ESC_Command_ms4_constrain);
}

// CDEFK
EKF CDEKF() {
  struct EKF EKF_return;

  // Initial Estimate = Initial Actual Position
  if (z == 0) {
    X_vec = { W_act(0) , W_act(1) , W_act(2)};
  }

  //Propagation

  //Calculation of Actual Torque
  RPM_del = RPM_act - RPM_prev;
  RPM_prev = RPM_act;
  RPM_dot_act = RPM_del / dt;
  U_act = - A * I * RPM_dot_act * PI / 30;
  if (var == 0) {
    U_act = { 0 , 0 , 0 };
    U = { 0 , 0 , 0 };
  }
  //  Serial << "U_act: " << U_act << '\n';
  Ux = U_act(0) ; Uy = U_act(1) ; Uz = U_act(2);//Torque calculated from change in the RPM

  //X dot
  x = X_vec;//X_vec=zeros(1,6) in the starting
  Xd Xd_out1 = Xdot();//rad/s^2
  k1 = {Xd_out1.X1, Xd_out1.X2, Xd_out1.X3};

  x = X_vec + k1 * dt / 2;
  Xd Xd_out2 = Xdot();
  k2 = {Xd_out2.X1, Xd_out2.X2, Xd_out2.X3};

  x = X_vec + k2 * dt / 2;
  Xd Xd_out3 = Xdot();
  k3 = {Xd_out3.X1, Xd_out3.X2, Xd_out3.X3};

  x = X_vec + k3 * dt;
  Xd Xd_out4 = Xdot();
  k4 = {Xd_out4.X1, Xd_out4.X2, Xd_out4.X3};

  X_vec = X_vec + ( k1 + k2 + k2 + k3 + k3 + k4 ) * dt / 6; //rad/s

  //P dot
  y = P_vec;
  Pd Pd_out1 = Pdot();
  k5 = {Pd_out1.Y1, Pd_out1.Y2, Pd_out1.Y3,
        Pd_out1.Y4, Pd_out1.Y5, Pd_out1.Y6,
        Pd_out1.Y7, Pd_out1.Y8, Pd_out1.Y9
       };

  y = P_vec + k5 * dt / 2;
  Pd Pd_out2 = Pdot();
  k6 = {Pd_out2.Y1, Pd_out2.Y2, Pd_out2.Y3,
        Pd_out2.Y4, Pd_out2.Y5, Pd_out2.Y6,
        Pd_out2.Y7, Pd_out2.Y8, Pd_out2.Y9
       };

  y = P_vec + k6 * dt / 2;
  Pd Pd_out3 = Pdot();
  k7 = {Pd_out3.Y1, Pd_out3.Y2, Pd_out3.Y3,
        Pd_out3.Y4, Pd_out3.Y5, Pd_out3.Y6,
        Pd_out3.Y7, Pd_out3.Y8, Pd_out3.Y9
       };

  y = P_vec + k7 * dt;
  Pd Pd_out4 = Pdot();
  k8 = {Pd_out4.Y1, Pd_out4.Y2, Pd_out4.Y3,
        Pd_out4.Y4, Pd_out4.Y5, Pd_out4.Y6,
        Pd_out4.Y7, Pd_out4.Y8, Pd_out4.Y9
       };

  P_vec = P_vec + ( k5 + k6 + k6 + k7 + k7 + k8 ) * dt / 6;

  //Updation
  //Measurement from the IMU
  Wx = W_act(0); Wy = W_act(1); Wz = W_act(2); //Angular Rates from IMU // rad/sec
  Meas = {Wx, Wy, Wz}; //rad/s

  X_vec = X_vec + K * (Meas - X_vec);
  P_vec = ( H - K * H ) * P_vec; // H used as identity matrix
  K_inv = H * P_vec * ~H + R;
  bool is_nonsingular = Invert(K_inv);
  K = P_vec * H * K_inv;

  EKF_return.K1 = X_vec(0);
  EKF_return.K2 = X_vec(1);
  EKF_return.K3 = X_vec(2);
  return EKF_return;
}

// Xdot Function
Xd Xdot() {
  struct Xd Xd_return;
  Wx = x(0); Wy = x(1); Wz = x(2); //rad/s
  X_dot = { Ux / Ixx + (Iyy*Wy * Wz) / Ixx - (Izz*Wy * Wz) / Ixx , Uy / Iyy - (Ixx*Wx * Wz) / Iyy + (Izz*Wx * Wz) / Iyy , Uz / Izz + (Ixx*Wx * Wy) / Izz - (Iyy*Wx * Wy) / Izz}; //rad/s
  Xd_return.X1 = X_dot(0);
  Xd_return.X2 = X_dot(1);
  Xd_return.X3 = X_dot(2);
  return Xd_return;
}

// Pdot Function
Pd Pdot() {
  struct Pd Pd_return;
  P_vec = y;
  Wx = X_vec(0); Wy = X_vec(1); Wz = X_vec(2);
  F = { 0 , (Iyy * Wz) / Ixx - (Izz * Wz) / Ixx , (Iyy * Wy) / Ixx - (Izz * Wy) / Ixx ,
        (Izz * Wz) / Iyy - (Ixx * Wz) / Iyy , 0 , (Izz * Wx) / Iyy - (Ixx * Wx) / Iyy ,
        (Ixx * Wy) / Izz - (Iyy * Wy) / Izz , (Ixx * Wx) / Izz - (Iyy * Wx) / Izz , 0
      };
  P_dot = F * P_vec + P_vec * ~F + Q;
  Pd_return.Y1 = P_dot(0, 0); Pd_return.Y2 = P_dot(0, 1); Pd_return.Y3 = P_dot(0, 2);
  Pd_return.Y4 = P_dot(1, 0); Pd_return.Y5 = P_dot(1, 1); Pd_return.Y6 = P_dot(1, 2);
  Pd_return.Y7 = P_dot(2, 0); Pd_return.Y8 = P_dot(2, 1); Pd_return.Y9 = P_dot(2, 2);
  return Pd_return;
}
